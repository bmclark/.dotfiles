
##################################################
# set color mode
set -g default-terminal "tmux-256color"
set -sa terminal-overrides ",xterm-termite:Tc"

# change default binding to ctrl+a
unbind C-b
set -g prefix C-a
bind C-a send-prefix

# history limit
set -g history-limit 100000

# More friendly split pane
bind-key | split-window -h
bind-key - split-window -v

# pane border styling
#set -g pane-border-style fg=green
# set -g pane-active-border-style 'fg=#ff79c6'
set -g pane-border-status top

# mouse mode
set -g mouse on

# resizes based on smallest client viewing, not smallest connected
setw -g aggressive-resize on

#urxvt tab like window switching (-n: no prior escape seq)
bind -n S-down new-window
bind -n S-left prev
bind -n S-right next
bind -n C-left swap-window -t -1
bind -n C-right swap-window -t +1

# refresh config with (prefix) + r
bind r source-file ~/.tmux.conf

################
# maximize current pane
bind + run "cut -c3- '#{TMUX_CONF}' | sh -s _maximize_pane '#{session_name}' '#D'"
# _maximize_pane() {
#   current_session=${1:-$(tmux display -p '#{session_name}')}
#   current_pane=${2:-$(tmux display -p '#{pane_id}')}
#
#   dead_panes=$(tmux list-panes -s -t "$current_session" -F '#{pane_dead} #{pane_id} #{pane_start_command}' | grep -E -o '^1 %.+maximized.+$' || true)
#   restore=$(printf "%s" "$dead_panes" | sed -n -E -e "s/^1 $current_pane .+maximized.+'(%[0-9]+)'\"?$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t $current_pane/p"\
#                                            -e "s/^1 (%[0-9]+) .+maximized.+'$current_pane'\"?$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t \1/p")
#
#   if [ -z "$restore" ]; then
#     [ "$(tmux list-panes -t "$current_session:" | wc -l | sed 's/^ *//g')" -eq 1 ] && tmux display "Can't maximize with only one pane" && return
#     info=$(tmux new-window -t "$current_session:" -F "#{session_name}:#{window_index}.#{pane_id}" -P "maximized... 2>/dev/null & \"$TMUX_PROGRAM\" ${TMUX_SOCKET:+-S \"$TMUX_SOCKET\"} setw -t \"$current_session:\" remain-on-exit on; printf \"\\033[\$(tput lines);0fPane has been maximized, press <prefix>+ to restore\n\" '$current_pane'")
#     session_window=${info%.*}
#     new_pane=${info#*.}
#
#     retry=20
#     while [ "$("$TMUX_PROGRAM" ${TMUX_SOCKET:+-S "$TMUX_SOCKET"} list-panes -t "$session_window" -F '#{session_name}:#{window_index}.#{pane_id} #{pane_dead}' 2>/dev/null)" != "$info 1" ] && [ "$retry" -ne 0 ]; do
#       sleep 0.1
#       retry=$((retry - 1))
#     done
#     if [ "$retry" -eq 0 ]; then
#       tmux display 'Unable to maximize pane'
#     fi
#
#     tmux setw -t "$session_window" remain-on-exit off \; swap-pane -s "$current_pane" -t "$new_pane"
#   else
#     $restore || tmux kill-pane
#   fi
# }

#####################################
#                                   #
#            PLUGINS                #
#                                   #
#####################################

#####################################
#tmux-logging
#####################################
# set -g @logging-path "$HOME/tmux-logs" 

#####################################
# pomodoro
#####################################
set -g status-right "#{pomodoro_status}"
set -g @pomodoro_granularity 'on'
set -g status-interval 1                    # Refresh the status line every second
set -g @pomodoro_on "#[fg=$text_red]üçÖ "
set -g @pomodoro_complete "#[fg=$text_green]üçÖ "

#############################################################################################
# Status bar options
# available plugins: battery, cpu-usage, git, gpu-usage, ram-usage, network, network-bandwidth, network-ping, attached-clients, network-vpn, weather, time

set -g @dracula-plugins "cpu-usage ram-usage network battery git weather time"
set -g @dracula-show-powerline true

#window flags
set -g @dracula-show-flags true
# the default is 5, it can accept any number
set -g @dracula-refresh-rate 5
# it can accept `session`, `smiley`, `window`, or any character.
set -g @dracula-show-left-icon session
#high contrast border
set -g @dracula-border-contrast true
#hide empty plugins
set -g @dracula-show-empty-plugins false

#########################################################################################
# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
# set -g @plugin 'dracula/tmux'
# set -g @plugin 'tmux-plugins/tmux-logging'
set -g @plugin 'olimorris/tmux-pomodoro-plus'
# set -g @plugin 'gcla/tmux-wormhole'

# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'github_username/plugin_name#branch'
# set -g @plugin 'git@github.com:user/plugin'
# set -g @plugin 'git@bitbucket.com:user/plugin'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
